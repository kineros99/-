╔════════════════════════════════════════════════════════════════════════════╗
║                                                                            ║
║             UNIVERSAL PROJECT DIAGNOSTIC TOOL                              ║
║             Setup, Activation, and Usage Guide                             ║
║                                                                            ║
║             Version: 1.0                                                   ║
║             Platform: Cross-Platform (Node.js, Python, Swift, PowerShell) ║
║                                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝


═══════════════════════════════════════════════════════════════════════════
TABLE OF CONTENTS
═══════════════════════════════════════════════════════════════════════════

1. WHAT IS THIS TOOL?
2. REQUIREMENTS
3. INSTALLATION & SETUP
   3.1 For Any Project (Drag & Drop)
   3.2 For Node.js/JavaScript Projects
   3.3 For Python Projects
   3.4 For iOS/macOS Projects
   3.5 For Windows/.NET Projects
4. ACTIVATION
5. USAGE
   5.1 Basic Usage
   5.2 Advanced Options
   5.3 Understanding the Output
6. GENERATED REPORTS
7. AI ASSISTANT INTEGRATION
8. TROUBLESHOOTING
9. FAQ
10. EXAMPLES


═══════════════════════════════════════════════════════════════════════════
1. WHAT IS THIS TOOL?
═══════════════════════════════════════════════════════════════════════════

The Universal Project Diagnostic Tool is a comprehensive analysis system that:

✅ ANALYZES your entire project structure
✅ DETECTS issues in code, configuration, and architecture
✅ GENERATES beautiful reports in multiple formats (JSON, HTML, Markdown)
✅ AUTO-FIXES common problems
✅ CREATES AI assistant context for instant project understanding

Think of it as a "health checkup" for your codebase!


═══════════════════════════════════════════════════════════════════════════
2. REQUIREMENTS
═══════════════════════════════════════════════════════════════════════════

MINIMUM REQUIREMENTS:

For Node.js version (universal-diagnostic.js):
  • Node.js v14 or higher
  • No additional dependencies (uses built-in modules only!)

For Python version (coming soon):
  • Python 3.7 or higher

For Swift version (coming soon):
  • Swift 5.0 or higher
  • macOS 10.15+ or iOS 13+

For PowerShell version (coming soon):
  • PowerShell 5.1 or PowerShell Core 7+


RECOMMENDED:
  • 50MB free disk space for reports
  • Terminal/Command Prompt access
  • Text editor (VS Code, Sublime, etc.)


═══════════════════════════════════════════════════════════════════════════
3. INSTALLATION & SETUP
═══════════════════════════════════════════════════════════════════════════

╔════════════════════════════════════════════════════════════════════════╗
║  3.1 FOR ANY PROJECT (Drag & Drop Method)                              ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Copy the entire folder
--------
Copy this entire "dev_project_diagnostic_tool" folder into your project's
root directory.

YOUR PROJECT STRUCTURE SHOULD LOOK LIKE:
  your-project/
  ├── dev_project_diagnostic_tool/    ← THIS FOLDER
  │   ├── universal-diagnostic.js
  │   ├── templates/
  │   ├── output/
  │   ├── README.md
  │   └── SETUP_AND_USAGE.txt
  ├── src/                             ← Your source code
  ├── package.json                     ← Your project files
  └── ... (other files)

STEP 2: Verify Node.js
--------
Open terminal in your project root and run:

  node --version

You should see something like: v14.0.0 or higher

If you get "command not found":
  - Download Node.js from: https://nodejs.org/
  - Install and restart terminal

STEP 3: Test the tool
--------
  cd dev_project_diagnostic_tool
  node universal-diagnostic.js

If you see the diagnostic interface, you're ready! ✅


╔════════════════════════════════════════════════════════════════════════╗
║  3.2 FOR NODE.JS/JAVASCRIPT PROJECTS (Integrated Setup)                ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Place in tools directory (recommended)
--------
  your-project/
  ├── tools/
  │   └── dev_project_diagnostic_tool/
  ├── netlify/functions/    (or src/, lib/, etc.)
  ├── package.json
  └── ...

STEP 2: Add npm script (optional but recommended)
--------
Edit your package.json and add:

  {
    "scripts": {
      "diagnostic": "node tools/dev_project_diagnostic_tool/universal-diagnostic.js",
      "diagnostic:fix": "node tools/dev_project_diagnostic_tool/universal-diagnostic.js --auto-fix",
      "diagnostic:html": "node tools/dev_project_diagnostic_tool/universal-diagnostic.js --format=html"
    }
  }

Now you can run:
  npm run diagnostic


╔════════════════════════════════════════════════════════════════════════╗
║  3.3 FOR PYTHON PROJECTS                                                ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Place tool in project root
--------
  your-django-project/
  ├── dev_project_diagnostic_tool/
  ├── manage.py
  ├── requirements.txt
  └── ...

STEP 2: Use Node.js version for now
--------
The Python version is coming soon. For now, use the Node.js version which
can analyze Python projects by detecting .py files, imports, and structure.

  cd dev_project_diagnostic_tool
  node universal-diagnostic.js

STEP 3: (Future) Use Python version
--------
When available:
  python universal_diagnostic.py


╔════════════════════════════════════════════════════════════════════════╗
║  3.4 FOR iOS/macOS PROJECTS                                             ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Place in project root
--------
  YourApp.xcodeproj/
  dev_project_diagnostic_tool/
  YourApp/
  └── ...

STEP 2: Use Node.js version for now
--------
  cd dev_project_diagnostic_tool
  node universal-diagnostic.js

The tool will detect .swift files, analyze Info.plist, and check structure.


╔════════════════════════════════════════════════════════════════════════╗
║  3.5 FOR WINDOWS/.NET PROJECTS                                          ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Place in project root
--------
  YourSolution.sln
  dev_project_diagnostic_tool\
  YourProject\
  └── ...

STEP 2: Use Node.js version via Command Prompt
--------
  cd dev_project_diagnostic_tool
  node universal-diagnostic.js

STEP 3: (Future) Use PowerShell version
--------
  .\Universal-Diagnostic.ps1


═══════════════════════════════════════════════════════════════════════════
4. ACTIVATION
═══════════════════════════════════════════════════════════════════════════

SIMPLE ACTIVATION (3 steps):

STEP 1: Navigate to the tool folder
--------
Open terminal/command prompt and navigate to the diagnostic tool:

  cd /path/to/your-project/dev_project_diagnostic_tool

  EXAMPLES:
    macOS/Linux:   cd ~/projects/myapp/dev_project_diagnostic_tool
    Windows:       cd C:\Projects\MyApp\dev_project_diagnostic_tool


STEP 2: Run the diagnostic
--------
  node universal-diagnostic.js

That's it! The tool is now ACTIVE and analyzing your project.


STEP 3: Check the output folder
--------
After completion, reports are generated in:

  dev_project_diagnostic_tool/output/
  ├── diagnostic-report.json
  ├── diagnostic-report.html
  └── diagnostic-summary.md


═══════════════════════════════════════════════════════════════════════════
5. USAGE
═══════════════════════════════════════════════════════════════════════════

╔════════════════════════════════════════════════════════════════════════╗
║  5.1 BASIC USAGE                                                        ║
╚════════════════════════════════════════════════════════════════════════╝

RUN DIAGNOSTIC:
  node universal-diagnostic.js

WHAT HAPPENS:
  1. Scans your entire project structure
  2. Analyzes all code files
  3. Checks database configuration
  4. Verifies API integrations
  5. Detects issues
  6. Generates 3 report formats
  7. Creates AI assistant context

OUTPUT:
  ╔═══════════════════════════════════════════════════════════════╗
  ║     UNIVERSAL PROJECT DIAGNOSTIC SYSTEM                       ║
  ║     Comprehensive Analysis with Auto-Fix                      ║
  ╚═══════════════════════════════════════════════════════════════╝

  📁 Phase 1: Scanning project structure...
    ✓ Backend files: 15
    ✓ Frontend files: 6

  📡 Phase 2: Analyzing backend functions...
    ✓ Analyzed 15 functions

  💾 Phase 4: Checking database configuration...
    ✓ .env file: Found
    ✓ Database URL: Configured

  🔍 Phase 6: Detecting issues...
    ⚠️  Critical issues: 3
    ⚠️  Warnings: 0

  ✅ Diagnostic complete in 0.06s
  📊 Health Score: 75/100
  ⚠️  Issues Found: 3


╔════════════════════════════════════════════════════════════════════════╗
║  5.2 ADVANCED OPTIONS                                                   ║
╚════════════════════════════════════════════════════════════════════════╝

GENERATE ONLY JSON REPORT:
  node universal-diagnostic.js --format=json

GENERATE ONLY HTML REPORT:
  node universal-diagnostic.js --format=html

GENERATE ONLY MARKDOWN REPORT:
  node universal-diagnostic.js --format=markdown

GENERATE ALL FORMATS (default):
  node universal-diagnostic.js --format=all

ENABLE AUTO-FIX:
  node universal-diagnostic.js --auto-fix

  This will automatically fix common issues like:
  - Creating missing .env.example file
  - Adding missing error handling (future)
  - Fixing CORS headers (future)

VERBOSE OUTPUT:
  node universal-diagnostic.js --verbose

COMBINE OPTIONS:
  node universal-diagnostic.js --format=html --auto-fix --verbose


╔════════════════════════════════════════════════════════════════════════╗
║  5.3 UNDERSTANDING THE OUTPUT                                           ║
╚════════════════════════════════════════════════════════════════════════╝

HEALTH SCORE INTERPRETATION:

  90-100 = EXCELLENT ★★★★★
    Your project is in excellent health!
    All best practices followed.

  80-89 = VERY GOOD ★★★★
    Project is solid with minor improvements possible.

  70-79 = GOOD ★★★
    Project is functional, some issues to address.

  60-69 = FAIR ★★
    Several issues need attention soon.

  50-59 = POOR ★
    Many critical issues, requires immediate work.

  0-49 = CRITICAL ☠️
    Project has severe problems, urgent action required.


ISSUE SEVERITY:

  🔴 CRITICAL - Fix immediately, blocks functionality
  ⚠️  WARNING - Should fix soon, doesn't block
  ℹ️  INFO - Nice to fix, cosmetic or optimization


═══════════════════════════════════════════════════════════════════════════
6. GENERATED REPORTS
═══════════════════════════════════════════════════════════════════════════

After running the diagnostic, check the output folder:

  dev_project_diagnostic_tool/output/


╔════════════════════════════════════════════════════════════════════════╗
║  REPORT 1: diagnostic-report.json                                       ║
╚════════════════════════════════════════════════════════════════════════╝

PURPOSE: Machine-readable for CI/CD pipelines, automation
FORMAT: JSON

OPEN WITH: Any text editor, or programmatically:

  const report = require('./output/diagnostic-report.json');
  console.log('Health Score:', report.healthScore);
  console.log('Issues:', report.issues.length);

USE CASES:
  • CI/CD integration (fail build if score < 70)
  • Automated dashboards
  • Tracking health over time


╔════════════════════════════════════════════════════════════════════════╗
║  REPORT 2: diagnostic-report.html                                       ║
╚════════════════════════════════════════════════════════════════════════╝

PURPOSE: Beautiful visual dashboard
FORMAT: HTML with embedded CSS

OPEN WITH: Any web browser

  macOS/Linux:  open output/diagnostic-report.html
  Windows:      start output\diagnostic-report.html
  Double-click: The file in your file explorer

FEATURES:
  • Color-coded health score
  • Interactive statistics cards
  • Function list with badges
  • Issue breakdown
  • Responsive design (works on mobile!)


╔════════════════════════════════════════════════════════════════════════╗
║  REPORT 3: diagnostic-summary.md                                        ║
╚════════════════════════════════════════════════════════════════════════╝

PURPOSE: Human-readable text summary
FORMAT: Markdown

OPEN WITH: Any text editor, or rendered in GitHub/GitLab

FEATURES:
  • Quick overview
  • Issue list
  • Function summary
  • Easy to share in chat/email


═══════════════════════════════════════════════════════════════════════════
7. AI ASSISTANT INTEGRATION
═══════════════════════════════════════════════════════════════════════════

THIS IS THE GAME-CHANGING FEATURE! 🤖


╔════════════════════════════════════════════════════════════════════════╗
║  WHAT IS AI ASSISTANT CONTEXT?                                         ║
╚════════════════════════════════════════════════════════════════════════╝

The diagnostic generates a comprehensive prompt file that gives AI assistants
(like Claude, ChatGPT, GitHub Copilot) COMPLETE knowledge of your project.

PROBLEM IT SOLVES:
  ❌ Without context: You explain your project piece by piece over 10+ messages
  ✅ With context: AI understands everything from ONE file


╔════════════════════════════════════════════════════════════════════════╗
║  HOW TO USE AI CONTEXT                                                  ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Generate the context
--------
  node universal-diagnostic.js

STEP 2: Open the context file
--------
  The file is at: templates/ai-context-template.md

  macOS/Linux:  open templates/ai-context-template.md
  Windows:      notepad templates\ai-context-template.md

STEP 3: Copy the entire file
--------
  Select all text (Ctrl+A / Cmd+A)
  Copy (Ctrl+C / Cmd+C)

STEP 4: Share with AI assistant
--------
  Open ChatGPT, Claude, or any AI assistant
  Paste the entire context
  Say: "This is my project context. Use it to understand my codebase."

STEP 5: Ask questions immediately!
--------
  Now the AI knows EVERYTHING about your project:
    • All functions and their purposes
    • Database schema
    • API endpoints
    • Common issues and fixes
    • How to test features

  EXAMPLE CONVERSATION:

  You: "Why are there 0 stores added?"

  AI: "All stores already exist in the database (duplicates).
       This is correct behavior! Your google_place_id UNIQUE
       constraint is preventing duplicates as designed."

  You: "How do I test with Orlando, USA?"

  AI: "Here's the complete workflow:
       1. curl http://localhost:8888/.netlify/functions/init-database
       2. curl -X POST ...discover-city... -d '{\"cityName\": \"orlando\"}'
       3. curl -X POST ...auto-populate-city... -d '{\"cityId\": 2}'"


╔════════════════════════════════════════════════════════════════════════╗
║  WHAT THE AI CONTEXT INCLUDES                                           ║
╚════════════════════════════════════════════════════════════════════════╝

✅ Complete project overview
✅ Architecture diagram
✅ All function signatures with examples
✅ Database schemas (tables, views, indexes)
✅ API endpoint catalog
✅ Common user intents and workflows
✅ Error patterns and solutions
✅ Quick start commands
✅ How to add new features


═══════════════════════════════════════════════════════════════════════════
8. TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════════

PROBLEM: "node: command not found"
---------
SOLUTION:
  1. Install Node.js from https://nodejs.org/
  2. Restart terminal
  3. Verify with: node --version


PROBLEM: "Cannot find module"
---------
SOLUTION:
  The tool uses only built-in Node.js modules, no dependencies needed!
  If you still see this error:
  1. Check you're in the correct directory
  2. Verify file exists: ls universal-diagnostic.js
  3. Check file permissions: chmod +x universal-diagnostic.js


PROBLEM: "Permission denied"
---------
SOLUTION:
  macOS/Linux:
    chmod +x universal-diagnostic.js
    node universal-diagnostic.js

  Windows:
    Run Command Prompt as Administrator


PROBLEM: "No output folder created"
---------
SOLUTION:
  1. Check disk space: df -h
  2. Check permissions: ls -la
  3. Create manually: mkdir -p output


PROBLEM: Reports are empty or incomplete
---------
SOLUTION:
  1. Run with verbose flag: node universal-diagnostic.js --verbose
  2. Check for errors in output
  3. Verify project structure (are files where expected?)


PROBLEM: Health score seems wrong
---------
SOLUTION:
  The score is calculated based on:
    • Critical issues (-10 points each)
    • Warnings (-5 points each)
    • Missing configurations (-10 to -15 points)

  Review the issues list in the report to understand deductions.


═══════════════════════════════════════════════════════════════════════════
9. FAQ
═══════════════════════════════════════════════════════════════════════════

Q: Does this tool modify my code?
A: Only with --auto-fix flag, and only safe fixes like creating .env.example

Q: Can I use this in production?
A: Yes! Run before deployments to verify health

Q: How often should I run it?
A:
   • Before each commit (add to pre-commit hook)
   • In CI/CD pipeline
   • After adding new features
   • When debugging issues

Q: Does it work with my project structure?
A: Yes! The tool adapts to different structures:
   • Netlify Functions
   • Express.js
   • Django/Flask
   • iOS/Swift
   • .NET
   • Or any custom structure

Q: Is it safe to commit the reports to Git?
A: Reports are safe but large. Add to .gitignore:

   # .gitignore
   dev_project_diagnostic_tool/output/

Q: Can I customize what it checks?
A: Yes! Edit universal-diagnostic.js to add custom checks

Q: How do I share results with my team?
A:
   • Commit the HTML report to a docs/ folder
   • Upload to internal wiki
   • Share link to hosted version
   • Email the Markdown report

Q: What if my project uses multiple languages?
A: The tool will analyze all detected languages. Future versions
   will have language-specific checks.


═══════════════════════════════════════════════════════════════════════════
10. EXAMPLES
═══════════════════════════════════════════════════════════════════════════

╔════════════════════════════════════════════════════════════════════════╗
║  EXAMPLE 1: First-time run on a new project                            ║
╚════════════════════════════════════════════════════════════════════════╝

$ cd my-new-project
$ mkdir tools
$ cp -r /path/to/dev_project_diagnostic_tool tools/
$ cd tools/dev_project_diagnostic_tool
$ node universal-diagnostic.js

OUTPUT:
  ✅ Diagnostic complete in 0.12s
  📊 Health Score: 45/100
  ⚠️  Issues Found: 8

ACTION:
  1. Open output/diagnostic-report.html
  2. Review critical issues
  3. Run with auto-fix: node universal-diagnostic.js --auto-fix
  4. Re-run diagnostic: node universal-diagnostic.js
  5. New score: 65/100 ✅


╔════════════════════════════════════════════════════════════════════════╗
║  EXAMPLE 2: CI/CD Integration                                          ║
╚════════════════════════════════════════════════════════════════════════╝

# .github/workflows/health-check.yml

name: Project Health Check
on: [push, pull_request]

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Run Diagnostic
        run: |
          cd tools/dev_project_diagnostic_tool
          node universal-diagnostic.js --format=json

      - name: Check Health Score
        run: |
          SCORE=$(node -p "require('./tools/dev_project_diagnostic_tool/output/diagnostic-report.json').healthScore")
          echo "Health Score: $SCORE"
          if [ $SCORE -lt 70 ]; then
            echo "❌ Health score too low: $SCORE/100"
            exit 1
          fi
          echo "✅ Health score acceptable: $SCORE/100"

      - name: Upload Reports
        uses: actions/upload-artifact@v2
        with:
          name: diagnostic-reports
          path: tools/dev_project_diagnostic_tool/output/


╔════════════════════════════════════════════════════════════════════════╗
║  EXAMPLE 3: Pre-commit Hook                                            ║
╚════════════════════════════════════════════════════════════════════════╝

# .git/hooks/pre-commit

#!/bin/bash

echo "Running project diagnostic..."

cd tools/dev_project_diagnostic_tool
node universal-diagnostic.js --format=json

SCORE=$(node -p "require('./output/diagnostic-report.json').healthScore")

if [ $SCORE -lt 60 ]; then
    echo "❌ Commit blocked! Health score too low: $SCORE/100"
    echo "Please fix critical issues before committing."
    exit 1
fi

echo "✅ Health check passed: $SCORE/100"
exit 0


╔════════════════════════════════════════════════════════════════════════╗
║  EXAMPLE 4: Using with AI Assistant                                    ║
╚════════════════════════════════════════════════════════════════════════╝

STEP 1: Generate context
  $ node universal-diagnostic.js

STEP 2: Open context file
  $ open templates/ai-context-template.md

STEP 3: Copy and share with ChatGPT

  User: [Pastes entire ai-context-template.md]
        "This is my project. Help me understand why stores aren't adding."

  AI: "Looking at your project, the auto-populate-city function (line 155)
       uses searchAllZones() which filters duplicates via existingPlaceIds.
       If 0 stores are added, it means all returned stores already exist
       in the database. This is CORRECT behavior - your google_place_id
       UNIQUE constraint is working perfectly to prevent duplicates!"

  User: "How do I add support for Germany?"

  AI: "Easy! Edit utils/places_nearby_google.js at line 73-88.
       Add to the countryMap:

       'germany': { code: 'DE', language: 'de-DE' },
       'deutschland': { code: 'DE', language: 'de-DE' }

       That's it! The system is fully dynamic, no other changes needed."


═══════════════════════════════════════════════════════════════════════════
QUICK REFERENCE CARD
═══════════════════════════════════════════════════════════════════════════

RUN DIAGNOSTIC:        node universal-diagnostic.js
AUTO-FIX:              node universal-diagnostic.js --auto-fix
HTML REPORT ONLY:      node universal-diagnostic.js --format=html
VERBOSE:               node universal-diagnostic.js --verbose

OUTPUT LOCATION:       ./output/
AI CONTEXT:            ./templates/ai-context-template.md

CHECK HEALTH SCORE:    Look for "Health Score: X/100" in output
                       Or open output/diagnostic-report.html

GET HELP:              See README.md
                       Or visit GitHub issues


═══════════════════════════════════════════════════════════════════════════
SUPPORT
═══════════════════════════════════════════════════════════════════════════

For issues, questions, or feature requests:
  • Read README.md in this folder
  • Check FAQ section above
  • Review generated reports for detailed information
  • Use AI assistant with the context file

Version: 1.0
Platform: Cross-platform (Node.js, Python, Swift, PowerShell)
License: MIT


═══════════════════════════════════════════════════════════════════════════

                    🎯 YOU'RE READY TO GO! 🎯

                Run: node universal-diagnostic.js

═══════════════════════════════════════════════════════════════════════════
